#!/usr/bin/groovy
@Library(['com.optum.jenkins.pipeline.library@master']) _

pipeline {
    agent {
        label 'docker-maven-slave'
    }

    environment {
	GIT_URL = "github.com/optum-omnichannel/omni-vui-custom-actions"
        TAG_VAL = "T_${BUILD_NUMBER}"
        NPM_AUTH_KEY = credentials('npm-auth-key')
        NPM_EMAIL = 'optumrx_user@optum.com'
    }

    options {
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '30',
            numToKeepStr: '5')
        disableConcurrentBuilds()
    }

    stages {
        /* stage('Fortify Scan') {
            when { branch 'main' }
            steps {
                glFortifyScan fortifyBuildName: "${TAG_VAL}",
                    fortifyHome: "/tools/fortify/Fortify_SCA_and_Apps_19.2.0",
                    uploadToScar: false,
                    wait: false,
                    criticalThreshold             : 0,
                    highThreshold                 : 0,
                    mediumThreshold               : 10,
                    lowThreshold                  : 500,
                    scarProjectVersion: "",
                    scarCredentialsId: "fortify-credentials",
                    fortifyJdkVersion: "1.8",
                    fortifyMemory: "-Xmx12000M -Xms6000M -Xss16M",
                    fortifyMaxSizeMemory: "-Xmx6000M",
                    isGenerateDevWorkbook: true
            }
        } */

        stage('Install Dependencies') {
            steps {
                checkout scm
                
                sh '''
                    . /etc/profile.d/jenkins.sh
                    echo > ~/.npmrc
                    npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual/
                    npm install
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    npm test
                '''
            }
        }

        stage('Sonar Scan') {
            steps {
                sh '''
                    npm run coverage
                '''
                glSonarNpmScan([
                    gitUserCredentialsId: "GHEC_TextToken",
                    mainBranchName: "main",
                    additionalProps: [
                        'sonar.sources': 'src',
                        'sonar.javascript.lcov.reportPath': 'coverage/lcov.info'
                    ]
                ])
            }
        }

        stage('Update Version') {
            when { branch 'main' }
            steps {
                sh '''
                git checkout $BRANCH_NAME
                npm version patch --force
                '''
                withCredentials([string(credentialsId: 'GHEC_TextToken', variable: 'GHEC_TextToken')]) {
                    sh '''
                    git config --global url."https://${GHEC_TextToken}@github.com".insteadOf "https://github.com"
		            git push
                    '''
                }
            }
        }

        stage('Build and Publish') {
            when { branch 'main' }
            steps {
                withCredentials([usernameColonPassword(credentialsId: 'ARTIFACTORY_CREDS', variable: 'USERPASS')]) {
                    sh ''' 
                    curl -u $USERPASS https://repo1.uhc.com/artifactory/api/npm/auth >> .npmrc
                    npm run build && mkdir dist && mv src lib exported dist
                    jq '{name,version,description,main,types,files,license,publishConfig,peerDependencies}' package.json > dist/package.json
                    cd dist
                    npm publish
                    '''
                }
            }
        }
    }
}
