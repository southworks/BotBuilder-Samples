#!/usr/bin/groovy
@Library(['com.optum.jenkins.pipeline.library@master']) _

// azure login using service principal
def azureLogin() {
    if ("${ARM_CREDENTIAL}" != "NA") {
        withCredentials([[
            $class: 'UsernamePasswordMultiBinding', 
            credentialsId: "${ARM_CREDENTIAL}", 
            usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh """
                az login --service-principal -u $USERNAME -p $PASSWORD --tenant $ARM_TENANT_ID
                az account set --subscription $ARM_SUBSCRIPTION
                """
        }
    }
}

pipeline {
    agent {
        //label 'docker-maven-slave'
        label 'docker-node18-slave'
    }

    environment {
      
        APPLICATION_NAME = 'omni-vui-member-rb'
        //APPLICATION_NAME = 'omni-vui-member-rb-cmp'

        //Default values only, overwritten in Parameters stage
        ENVIRONMENT = 'NA'
        ARM_CREDENTIAL = 'NA'
        ARM_SUBSCRIPTION = 'NA'
        TAG_VAL = 'NA'
        PROMOTE_TAG = 'NA'
        BOT_RESOURCES_ID = 'NA'
        RESOURCE_JSON = 'NA'
        RESOURCE_GROUP_NAME = 'NA'
        KEY_VAULT_NAME = 'NA'
        LUIS_COGNITIVE_ACCOUNT_NAME = 'NA'
        WEBAPP_NAME = 'NA'  
        LUIS_APP_NAME_BASE = 'NA'     
        QNA_APP_NAME_BASE = 'NA' 
        LOB ='NA'
		DT_DOWNLOAD_ENDPOINT = 'NA'
		DT_DOWNLOAD_TENANT_ID = 'NA'
		DT_COMM_ENDPOINT = 'NA'
        DT_COMM_TENANT_ID = 'NA'
        DEPLOY_DYNATRACE = 'NA'

        REPO_NAME = "azure-$APPLICATION_NAME"
        NPM_AUTH_KEY = credentials('npm-auth-key')
        NPM_EMAIL = 'optumrx_user@optum.com'
        ARM_TENANT_ID = "db05faca-c82a-4b9d-b9c5-0f64b6755421"
        APPROVERS = "va_omni_vui_prod"
        ARTIFACTORY_STATUS_CODE = '201'
    }

    options {
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '30',
            numToKeepStr: '5')
        disableConcurrentBuilds()
    }

    stages {
        stage('Parameters') {
            steps {
                script {
                    if(env.BRANCH_NAME ==~ /feature\/US\d{7}_?.*/ || (env.BRANCH_NAME == 'main' && BUILD_NUMBER == "1")) {
                        properties([
                            parameters([
                                string(name: 'VERSION', defaultValue: '0', description: 'Build version (Build Number) to deploy'),
                                choice(name: 'LOB', choices: 'ei\ncs\nmr', description: 'Target LOB to deploy version')
                            ])
                        ])
                        if (!params.LOB) {
                            LOB = 'ei'
                        }
                        else {
                            LOB = params.LOB
                        }
                        ENVIRONMENT = 'dev'
                    } else if (env.BRANCH_NAME == 'main') {
                        properties([
                            parameters([
                                string(name: 'VERSION', defaultValue: '0', description: 'Build version (Build Number) to deploy'),
                                choice(name: 'LOB', choices: 'ei\ncs\nmr', description: 'Target LOB to deploy version')
                            ])
                        ])
                        if (!params.LOB) {
                            LOB = 'ei'
                        }
                        else {
                            LOB = params.LOB
                        }
                        ENVIRONMENT =  'qa'
                    } else if( env.BRANCH_NAME ==~ /release\/\d{1,2}\.\d{1,2}_?.*/ ) {
                        properties([
                            parameters([
                                string(name: 'VERSION', defaultValue: '0', description: 'Build version (Build Number) to deploy'),
                                choice(name: 'ENVIRONMENT', choices: 'stage\nprod\npilot', description: 'Target environment to deploy version'), 
                                choice(name: 'LOB', choices: 'ei\ncs\nmr', description: 'Target LOB to deploy version')
                            ])
                        ])

                        //The first run will run automatically without user provided params, so a default needs to be set.
                        if (!params.ENVIRONMENT) {
                            ENVIRONMENT = 'stage'
							LOB = 'ei'
                        }
                        else {
                            ENVIRONMENT = params.ENVIRONMENT
		                    LOB = params.LOB
                        }

                        VERSION_FROM_BRANCH = env.BRANCH_NAME.split(/\//)[1]
                        RELEASE_NUMBER = VERSION_FROM_BRANCH.replaceAll(/\./, '-')
                    }
                    echo "LOB: ${LOB}"
                    IS_PROD_OR_PILOT = ENVIRONMENT ==~ /(prod|pilot)/
                    IS_DEV_OR_QA_OR_STAGE = ENVIRONMENT ==~ /(dev|qa|stage)/
                    IS_UNKNOWN_ENVIRONMENT = ENVIRONMENT == 'NA'
                    IS_LOB_CS_OR_MR = LOB ==~ /(cs|mr)/
                    
                    IS_PROD_SUBSCRIPTION = ENVIRONMENT ==~ /(prod|pilot|stage)/
                    IS_NON_PROD_SUBSCRIPTION = ENVIRONMENT ==~ /(dev|qa)/
                    /*if((ENVIRONMENT == "stage" && IS_LOB_CS_OR_MR) || (ENVIRONMENT == "prod")){
					     APPLICATION_NAME = APPLICATION_NAME+'-'+LOB
					}*/
                    APPLICATION_NAME = APPLICATION_NAME+'-'+LOB
                    if(IS_PROD_SUBSCRIPTION) {
                        ARM_CREDENTIAL = 'Azure_Prod_UserToken'
                        ARM_SUBSCRIPTION = 'f963e1df-e288-4594-b8a4-0a8a3b04267d'

                        TAG_VAL = "release-${RELEASE_NUMBER}-${env.BUILD_NUMBER}"
                        PROMOTE_TAG = "release-${RELEASE_NUMBER}-${params.VERSION}"
                    }
                    else if(IS_NON_PROD_SUBSCRIPTION) {
                        ARM_CREDENTIAL = 'ACR_ID'
                        ARM_SUBSCRIPTION = 'cde58a60-b083-4190-8122-66243d80da50'
                    }
					
					
					/*
                        Package is only downloaded/extracted once (for stage), and is built
                        from prod's DT instance. App level configuration points
                        the app to the correct DT instance (stage -> test, prod -> prod).
                    */
                    if (ENVIRONMENT == "stage" && LOB == 'mr') {
                        DT_DOWNLOAD_ENDPOINT='https://dtsaas.uhc.com'
                        DT_DOWNLOAD_TENANT_ID='52264582-7185-4dbf-bf87-0a4fcbef5534'
                        DT_DOWNLOAD_CREDENTIALS_ID='DynatraceApi_Prod_TextToken'
                    }
                     /*
                        These are settings for which instance of DT the app is communicating with.
                    */
                    if (ENVIRONMENT == "stage" && LOB == 'mr') {
                        DT_COMM_ENDPOINT='https://dtsaas-test.uhc.com'
                        DT_COMM_TENANT_ID='6dd37170-3609-43aa-9955-2fa7dc5927ad'
                        DT_COMM_CREDENTIALS_ID='DynatraceApi_Test_TextToken'
                        DEPLOY_DYNATRACE = true
                    }
                    else if (ENVIRONMENT == "prod" && LOB =='mr') {
                        DT_DOWNLOAD_ENDPOINT='https://dtsaas.uhc.com'
                        DT_DOWNLOAD_TENANT_ID='52264582-7185-4dbf-bf87-0a4fcbef5534'
                        DT_COMM_ENDPOINT='https://dtsaas.uhc.com'
                        DT_COMM_TENANT_ID='52264582-7185-4dbf-bf87-0a4fcbef5534'
                        DT_COMM_CREDENTIALS_ID='DynatraceApi_Prod_TextToken'
                        DEPLOY_DYNATRACE = true
                    }
                    else {
                        DEPLOY_DYNATRACE = false
                    }
                }

                echo "Logging in to azure..."
                azureLogin()

                echo "Retrieving resource names from table storage..."
                script {
                    if (IS_PROD_SUBSCRIPTION || IS_NON_PROD_SUBSCRIPTION) {

                        BOT_RESOURCES_ID = sh(returnStdout: true, 
                            script: "az storage entity query --table-name botactive --account-name sttfstateva${ENVIRONMENT} --filter \"PartitionKey eq '${ENVIRONMENT}' and RowKey eq '${APPLICATION_NAME}'\"  | jq '.items[0].bot_resources_id' -r"
                        ).trim()

                        RESOURCE_JSON = sh(returnStdout: true, 
                            script: "az storage entity query --table-name botresources --account-name sttfstateva${ENVIRONMENT} --filter \"PartitionKey eq '${APPLICATION_NAME}' and RowKey eq '${BOT_RESOURCES_ID}'\"  | jq '.items[0]'"
                        )

                        WEBAPP_NAME = sh(returnStdout: true, 
                           script: "echo '${RESOURCE_JSON}' | jq '.app_service_name' -r"
                        ).trim()
                        RESOURCE_GROUP_NAME = sh(returnStdout: true, 
                            script: "echo '${RESOURCE_JSON}' | jq '.resource_group_name' -r"
                        ).trim()
                        KEY_VAULT_NAME = sh(returnStdout: true, 
                            script: "echo '${RESOURCE_JSON}' | jq '.key_vault_name' -r"
                        ).trim()
                        LUIS_COGNITIVE_ACCOUNT_NAME = sh(returnStdout: true, 
                            script: "echo '${RESOURCE_JSON}' | jq '.luis_cognitive_account_name' -r"
                        ).trim()
                        LUIS_APP_NAME_BASE = sh(returnStdout: true, 
                            script: "echo '${RESOURCE_JSON}' | jq '.luis_app_name_base' -r"
                        ).trim()
                        QNA_APP_NAME_BASE = sh(returnStdout: true, 
                            script: "echo '${RESOURCE_JSON}' | jq '.qna_app_name_base' -r"
                        ).trim()
                    }
                }

                echo "------------------------------------------------------------"
                echo "                 Execution Parameters                       "
                echo "------------------------------------------------------------"
                echo "         Jenkins Build No. ${env.BUILD_NUMBER}              "
                echo "------------------------------------------------------------"
                echo "Application Name   : ${APPLICATION_NAME}"
                echo "Environment        : ${ENVIRONMENT}"
                echo "ARM Credential     : ${ARM_CREDENTIAL}"
                echo "ARM Subscription   : ${ARM_SUBSCRIPTION}"
                echo "Build Tag          : ${TAG_VAL}"
                echo "------------------------------------------------------------"
                echo "                 Additional Parameters                      "
                echo "------------------------------------------------------------"
                echo "Target Version              : ${params.VERSION}"
                echo "Promote Tag                 : ${PROMOTE_TAG}"
                echo "Bot Resources ID            : ${BOT_RESOURCES_ID}"
                echo "Resource JSON               : ${RESOURCE_JSON}"
                echo "Resource Group Name         : ${RESOURCE_GROUP_NAME}"
                echo "Key Vault Name              : ${KEY_VAULT_NAME}"
                echo "Luis Cognitive Account Name : ${LUIS_COGNITIVE_ACCOUNT_NAME}"
                echo "Web App Name                : ${WEBAPP_NAME}"
                echo "Luis Appe Name Base         : ${LUIS_APP_NAME_BASE}"
                echo "QnA App Name Base           : ${QNA_APP_NAME_BASE}"
		echo "DT Download Endpoint        : ${DT_DOWNLOAD_ENDPOINT}"
                echo "DT Download Tenant ID       : ${DT_DOWNLOAD_TENANT_ID}"
                echo "DT Comm Endpoint            : ${DT_COMM_ENDPOINT}"
                echo "DT Comm Tenant ID           : ${DT_COMM_TENANT_ID}"
                echo "Deploy Dynatrace            : ${DEPLOY_DYNATRACE}"
                echo "------------------------------------------------------------"
            }
        }

//         stage('Fortify Scan') {
//             when {
//                 expression {
//                     return IS_DEV_OR_QA_OR_STAGE
//                 }
//             }
//             steps {
//                 glFortifyScan fortifyBuildName: "${TAG_VAL}",
//                     fortifyHome: "/tools/fortify/Fortify_SCA_and_Apps_19.2.0",
//                     uploadToScar: false,
//                     wait: false,
//                     criticalThreshold             : 0,
//                     highThreshold                 : 0,
//                     mediumThreshold               : 10,
//                     lowThreshold                  : 500,
//                     scarProjectVersion: "", // Modify based on team
//                     scarCredentialsId: "fortify-credentials",
//                     fortifyJdkVersion: "1.8",
//                     fortifyMemory: "-Xmx12000M -Xms6000M -Xss16M",
//                     fortifyMaxSizeMemory: "-Xmx6000M",
//                     isGenerateDevWorkbook: true,
//                     source: "."
//             }
//         }

        // dependencies are installed for all build branches to use botframework cli
        stage('Install Dependencies') {
            steps {
                checkout scm

                sh '''
                    . /etc/profile.d/jenkins.sh
                    echo > ~/.npmrc
                    npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual/
                    npm install
                    npm install --sav-dev @microsoft/botframework-cli@4.15.0 --prefix scripts
                '''
            }
        }
		stage('Download/Extract Dynatrace') {
            when {
                expression {
                    return ENVIRONMENT == 'stage' && LOB =='mr'
                }
            }
            steps {
                withCredentials([
                    string(credentialsId: "$DT_DOWNLOAD_CREDENTIALS_ID", variable: 'DYNATRACE_API_TOKEN')
                ])
                {
                    sh "dtEndpoint='$DT_DOWNLOAD_ENDPOINT' dtTenantId='$DT_DOWNLOAD_TENANT_ID' ./scripts/download_extract_dynatrace.sh"
                }
            }
        }
        stage('Unit Testing') {
            when {
                expression {
                    return (IS_DEV_OR_QA_OR_STAGE || IS_PROD_OR_PILOT)
                }
            }
            steps {
                sh '''
                    npm test
                '''
            }
        }

        stage('Sonar Scan') {
            when {
                expression {
                    return (IS_DEV_OR_QA_OR_STAGE || IS_PROD_OR_PILOT)
                }
            }
            steps {
                sh '''
                    npm run coverage
                '''
                glSonarNpmScan([
                    gitUserCredentialsId: "GHEC_TextToken",
                    mainBranchName: "main",
                    sonarScanner: "/tools/sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner",
                    sonarExclusions: "**/*.test.*,index.js,dynatrace/**,/utils/loggingMiddleware.js",
                    additionalProps: [
                    'sonar.sources': '.',
                    'sonar.javascript.lcov.reportPaths': 'coverage/lcov.info'
                    ]
                ])
            }
        }

        stage('Build Runtime Configuration') {
            when {
                expression {
                    return (IS_DEV_OR_QA_OR_STAGE || IS_PROD_OR_PILOT)
                }
            }
            steps {
                script {
                    // zipped runtime is pulled from artifactory to be promoted to prod and pilot
                    if (IS_PROD_OR_PILOT) {
                        // manual confirmation of build and target is needed to proceed
                        // MSIDs or windows global groups of people permitted to respond to the input, separated by ','
                        glApproval([
                            time: 10,
                            unit: "MINUTES",
                            message: "You are deploying ${PROMOTE_TAG} to ${ENVIRONMENT}",
                            submitter: "${APPROVERS}" // Modify based on team
                        ])

                        // runtime is unzipped in a separate directory to ensure separation from release branch
                        // necessary scripts are copied into the separate directory
                        withCredentials([usernameColonPassword(credentialsId: 'ARTIFACTORY_CREDS', variable: 'USERPASS')]) {
                            sh """
                                mkdir promotedir
                                cp scripts/promote_build.sh promotedir/build.sh
                                cp scripts/publish_luis.sh promotedir/publish_luis.sh
                                cd promotedir

                                curl -u $USERPASS "https://repo1.uhc.com/artifactory/UHG-Releases/com/optum/va/${REPO_NAME}/${PROMOTE_TAG}.zip" -o ./${PROMOTE_TAG}.zip
                                unzip ${PROMOTE_TAG}.zip
                                keyVaultName=${KEY_VAULT_NAME} luisAppNameBase=${LUIS_APP_NAME_BASE} qnaAppNameBase=${QNA_APP_NAME_BASE} ./build.sh  
                            """
                        }
                    } else {
                        sh """
                            keyVaultName=${KEY_VAULT_NAME} luisAppNameBase=${LUIS_APP_NAME_BASE} qnaAppNameBase=${QNA_APP_NAME_BASE} ./scripts/build.sh
                        """
                    }
                }
            }
        }

        // runtime from release branch is saved to artifactory
        stage('Save to Artifactory') {
            when {
                expression {
                    return ENVIRONMENT == 'stage'
                }
            }
            steps {
                withEnv(["TAG_VAL=${TAG_VAL}"]) {
                    withCredentials([usernameColonPassword(credentialsId: 'ARTIFACTORY_CREDS', variable: 'USERPASS')]) {
                        sh '''
                        zip -rq code.zip . -x code.zip 'scripts/node_modules/*' 'scripts/*.json' '.git/*'
                        ARTIFACTORY_STATUS_CODE=$(curl -w "%{http_code}\\n" -u "$USERPASS" -X PUT "https://repo1.uhc.com/artifactory/UHG-Releases/com/optum/va/${REPO_NAME}/${TAG_VAL}.zip" -T ./code.zip -s -o /dev/null)
                        '''
                    }
                }
                script {
                    if(env.ARTIFACTORY_STATUS_CODE != '201'){
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
		stage('Configure app service for Dynatrace') {
            when {
                expression {
                    return DEPLOY_DYNATRACE
                }
            }
            steps {
                withCredentials([
                    string(credentialsId: "$DT_COMM_CREDENTIALS_ID", variable: 'DYNATRACE_API_TOKEN')
                ])
                {
                    sh "env=$ENVIRONMENT resourceJson='$RESOURCE_JSON' dtEndpoint='$DT_COMM_ENDPOINT' dtTenantId='$DT_COMM_TENANT_ID' ./scripts/configure_app_service_for_dynatrace.sh"
                }
            }
        }
        // initial deployment to prerelease slot
        stage('Deploy to Prerelease Slot') {
            when {
                expression {
                    return (IS_DEV_OR_QA_OR_STAGE || IS_PROD_OR_PILOT)
                }
            }
            steps {
                script {
                    // prod and pilot promotion require running script from a separate directory
                    // target environment specific variables are also created
                    if (IS_PROD_OR_PILOT) {
                        sh """                        
                            cd promotedir
                            keyVaultName=${KEY_VAULT_NAME} cognitiveAccountName=${LUIS_COGNITIVE_ACCOUNT_NAME} resourceGroupName=${RESOURCE_GROUP_NAME} ./publish_luis.sh
                        
                            zip -rq code.zip . -x code.zip 'scripts/node_modules/*' 'scripts/*.json' '.git/*'
                            az webapp deployment source config-zip --resource-group ${RESOURCE_GROUP_NAME} --name ${WEBAPP_NAME} --slot prerelease --src code.zip
                        """
                    } else {
                        sh """
                            keyVaultName=${KEY_VAULT_NAME} cognitiveAccountName=${LUIS_COGNITIVE_ACCOUNT_NAME} resourceGroupName=${RESOURCE_GROUP_NAME} ./scripts/publish_luis.sh
                            botName=${APPLICATION_NAME} keyVaultName=${KEY_VAULT_NAME} resourceGroupName=${RESOURCE_GROUP_NAME} webappName=${WEBAPP_NAME} ./scripts/publish.sh
                        """
                    }

                    // Pause the pipeline so container can warm up
                    sleep(time:3,unit:"MINUTES")
                }
            }
        }

        // Integration (and Smoke) tests are ran against prerelease slots first
        stage('Validate Prerelease Slot') {
            when {
                expression {
                     //return ENVIRONMENT == 'qa'
                     return ENVIRONMENT == ''
                }
            }
            steps {
                script {
                    if (IS_PROD_OR_PILOT) {
                        sh """
                            cd promotedir
                            npm run test:dialog-smoke
                        """
                    } else {
                        sh """
                            npm run test:dialog
                        """
                    }
                }
            }
        }

        // When the validation tests pass then the slots are swapped
        // Production is where 100% of default traffic is routed 
        stage('Swap Prerelease and Production Slots') {
            when {
                expression {
                    return (IS_DEV_OR_QA_OR_STAGE || IS_PROD_OR_PILOT)
                }
            }
            steps {
                script {
                    sh """
                        az webapp deployment slot swap --slot prerelease --name ${WEBAPP_NAME} --resource-group ${RESOURCE_GROUP_NAME}
                    """
                }
            }
        }
    }

    post {
      changed {
          office365ConnectorSend webhookUrl: env.TEAMS_ALERT_WEBHOOK
      }
      always {	
            script {
                publishHTML (target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'coverage/lcov-report',
                    reportFiles: 'index.html',
                    reportName: "Coverage Report"
                ])	

                publishHTML (target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'botium-report',
                    reportFiles: 'botium-report.html',
                    reportName: "Botium Report"
                ])
            }	
        }
    }
}